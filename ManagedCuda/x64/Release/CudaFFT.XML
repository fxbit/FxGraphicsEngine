<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CudaFFT</name>
    </assembly>
    <members>
        <member name="T:ManagedCuda.CudaFFT.CudaFFTException">
            <summary>
            An CudaFFTException is thrown, if any wrapped call to the CUFFT-library does not return <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/>.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="serInfo"></param>
            <param name="streamingContext"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTException.#ctor(ManagedCuda.CudaFFT.cufftResult)">
            <summary>
            
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTException.#ctor(ManagedCuda.CudaFFT.cufftResult,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="error"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTException.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTException.CudaFFTError">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaFFT.CudaFFTPlanMany">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created.<para/>
            Input parameters <c>inembed</c>, <c>istride</c>, and <c>idist</c> and output
            parameters <c>onembed</c>, <c>ostride</c>, and <c>odist</c> will allow setup of noncontiguous
            input data in a future version (Beta status in version 4.0). Note that for CUFFT 3.0,
            these parameters are ignored and the layout of batched data must be
            side‐by‐side and not interleaved.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created.
            </summary>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created.
            </summary>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.CudaFFT.Compatibility)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created.
            </summary>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="mode">The <see cref="T:ManagedCuda.CudaFFT.Compatibility"/> option to be used</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream,ManagedCuda.CudaFFT.Compatibility)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created.
            </summary>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="mode">The <see cref="T:ManagedCuda.CudaFFT.Compatibility"/> option to be used</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created.
            </summary>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream,System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created.
            </summary>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.CudaFFT.Compatibility,System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created.
            </summary>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="mode">The <see cref="T:ManagedCuda.CudaFFT.Compatibility"/> option to be used</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream,ManagedCuda.CudaFFT.Compatibility,System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created.
            </summary>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="mode">The <see cref="T:ManagedCuda.CudaFFT.Compatibility"/> option to be used</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            If idata and odata are the
            same, this method does an in‐place transform.
            </summary>
            <param name="idata"></param>
            <param name="odata"></param>
            <param name="direction">Only unsed for transformations where direction is not implicitly given by type</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            This method does an in‐place transform.
            </summary>
            <param name="iodata"></param>
            <param name="direction">Only unsed for transformations where direction is not implicitly given by type</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            If idata and odata are the
            same, this method does an in‐place transform.<para/>
            This method is only valid for transform types where transorm direction is implicitly 
            given by the type (i.e. not C2C and not Z2Z)
            </summary>
            <param name="idata"></param>
            <param name="odata"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.Exec(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            This method does an in‐place transform.<para/>
            This method is only valid for transform types where transorm direction is implicitly 
            given by the type (i.e. not C2C and not Z2Z)
            </summary>
            <param name="iodata"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.SetStream(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Associates a CUDA stream with a CUFFT plan. All kernel launches
            made during plan execution are now done through the associated
            stream, enabling overlap with activity in other streams (for example,
            data copying). The association remains until the plan is destroyed or
            the stream is changed with another call to SetStream().
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.SetCompatibilityMode(ManagedCuda.CudaFFT.Compatibility)">
            <summary>
            configures the layout of CUFFT output in FFTW‐compatible modes.
            When FFTW compatibility is desired, it can be configured for padding
            only, for asymmetric complex inputs only, or to be fully compatible.
            </summary>
            <param name="mode"></param>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.Rank">
            <summary>
            Dimensionality of the transform (1, 2, or 3)
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.N">
            <summary>
            An array of size rank, describing the size of each dimension
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.Batch">
            <summary>
            Batch size for this transform
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.Type">
            <summary>
            Transform data type (e.g., C2C, as per other CUFFT calls)
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.Inembed">
            <summary>
            See CUFFT Manual
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.Istride">
            <summary>
            See CUFFT Manual
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.Idist">
            <summary>
            See CUFFT Manual
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.Onembed">
            <summary>
            See CUFFT Manual
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.Ostride">
            <summary>
            See CUFFT Manual
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.Odist">
            <summary>
            See CUFFT Manual
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaFFT.CudaFFTPlan1D">
            <summary>
            Creates a 1D FFT plan configuration for a specified signal size and data
            type. The <c>batch</c> input parameter tells CUFFT how many 1D
            transforms to configure.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.#ctor(System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32)">
            <summary>
            Creates a new 1D FFT plan
            </summary>
            <param name="nx">The transform size (e.g., 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., C2C for complex to complex)</param>
            <param name="batch">Number of transforms of size nx</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.#ctor(System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Creates a new 1D FFT plan
            </summary>
            <param name="nx">The transform size (e.g., 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., C2C for complex to complex)</param>
            <param name="batch">Number of transforms of size nx</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.#ctor(System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32,ManagedCuda.CudaFFT.Compatibility)">
            <summary>
            Creates a new 1D FFT plan
            </summary>
            <param name="nx">The transform size (e.g., 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., C2C for complex to complex)</param>
            <param name="batch">Number of transforms of size nx</param>
            <param name="mode">The <see cref="T:ManagedCuda.CudaFFT.Compatibility"/> option to be used</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.#ctor(System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32,ManagedCuda.BasicTypes.CUstream,ManagedCuda.CudaFFT.Compatibility)">
            <summary>
            Creates a new 1D FFT plan
            </summary>
            <param name="nx">The transform size (e.g., 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., C2C for complex to complex)</param>
            <param name="batch">Number of transforms of size nx</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="mode">The <see cref="T:ManagedCuda.CudaFFT.Compatibility"/> option to be used</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            If idata and odata are the
            same, this method does an in‐place transform.
            </summary>
            <param name="idata"></param>
            <param name="odata"></param>
            <param name="direction">Only unsed for transformations where direction is not implicitly given by type</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            This method does an in‐place transform.
            </summary>
            <param name="iodata"></param>
            <param name="direction">Only unsed for transformations where direction is not implicitly given by type</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            If idata and odata are the
            same, this method does an in‐place transform.<para/>
            This method is only valid for transform types where transorm direction is implicitly 
            given by the type (i.e. not C2C and not Z2Z)
            </summary>
            <param name="idata"></param>
            <param name="odata"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.Exec(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            This method does an in‐place transform.<para/>
            This method is only valid for transform types where transorm direction is implicitly 
            given by the type (i.e. not C2C and not Z2Z)
            </summary>
            <param name="iodata"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.SetStream(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Associates a CUDA stream with a CUFFT plan. All kernel launches
            made during plan execution are now done through the associated
            stream, enabling overlap with activity in other streams (for example,
            data copying). The association remains until the plan is destroyed or
            the stream is changed with another call to SetStream().
            </summary>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.SetCompatibilityMode(ManagedCuda.CudaFFT.Compatibility)">
            <summary>
            configures the layout of CUFFT output in FFTW‐compatible modes.
            When FFTW compatibility is desired, it can be configured for padding
            only, for asymmetric complex inputs only, or to be fully compatible.
            </summary>
            <param name="mode">The <see cref="T:ManagedCuda.CudaFFT.Compatibility"/> option to be used</param>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan1D.NX">
            <summary>
            The transform size (e.g., 256 for a 256-point FFT)
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan1D.Type">
            <summary>
            The transform data type (e.g., C2C for complex to complex)
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan1D.Batch">
            <summary>
            Number of transforms of size NX
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaFFT.CudaFFTPlan2D">
            <summary>
            Creates a 2D FFT plan configuration according to specified signal sizes
            and data type. This class is the same as <see cref="T:ManagedCuda.CudaFFT.CudaFFTPlan1D"/> except that
            it takes a second size parameter, <c>ny</c>, and does not support batching.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.#ctor(System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType)">
            <summary>
            Creates a new 2D FFT plan
            </summary>
            <param name="nx">The transform size in the X dimension (number of rows)</param>
            <param name="ny">The transform size in the Y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.#ctor(System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Creates a new 2D FFT plan
            </summary>
            <param name="nx">The transform size in the X dimension (number of rows)</param>
            <param name="ny">The transform size in the Y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.#ctor(System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.CudaFFT.Compatibility)">
            <summary>
            Creates a new 2D FFT plan
            </summary>
            <param name="nx">The transform size in the X dimension (number of rows)</param>
            <param name="ny">The transform size in the Y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
            <param name="mode">The <see cref="T:ManagedCuda.CudaFFT.Compatibility"/> option to be used</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.#ctor(System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream,ManagedCuda.CudaFFT.Compatibility)">
            <summary>
            Creates a new 2D FFT plan
            </summary>
            <param name="nx">The transform size in the X dimension (number of rows)</param>
            <param name="ny">The transform size in the Y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="mode">The <see cref="T:ManagedCuda.CudaFFT.Compatibility"/> option to be used</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            If idata and odata are the
            same, this method does an in‐place transform.
            </summary>
            <param name="idata"></param>
            <param name="odata"></param>
            <param name="direction">Only unsed for transformations where direction is not implicitly given by type</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            This method does an in‐place transform.
            </summary>
            <param name="iodata"></param>
            <param name="direction">Only unsed for transformations where direction is not implicitly given by type</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            If idata and odata are the
            same, this method does an in‐place transform.<para/>
            This method is only valid for transform types where transorm direction is implicitly 
            given by the type (i.e. not C2C and not Z2Z)
            </summary>
            <param name="idata"></param>
            <param name="odata"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.Exec(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            This method does an in‐place transform.<para/>
            This method is only valid for transform types where transorm direction is implicitly 
            given by the type (i.e. not C2C and not Z2Z)
            </summary>
            <param name="iodata"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.SetStream(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Associates a CUDA stream with a CUFFT plan. All kernel launches
            made during plan execution are now done through the associated
            stream, enabling overlap with activity in other streams (for example,
            data copying). The association remains until the plan is destroyed or
            the stream is changed with another call to SetStream().
            </summary>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.SetCompatibilityMode(ManagedCuda.CudaFFT.Compatibility)">
            <summary>
            configures the layout of CUFFT output in FFTW‐compatible modes.
            When FFTW compatibility is desired, it can be configured for padding
            only, for asymmetric complex inputs only, or to be fully compatible.
            </summary>
            <param name="mode"></param>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan2D.NX">
            <summary>
            The transform size in the X dimension (number of rows)
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan2D.NY">
            <summary>
            The transform size in the Y dimension (number of columns)
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan2D.Type">
            <summary>
            The transform data type (e.g., C2R for complex to real)
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaFFT.CudaFFTNativeMethods">
            <summary>
            C# wrapper for the NVIDIA CUFFT API (--> cufft.h)
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftPlan1d(ManagedCuda.CudaFFT.cufftHandle@,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32)">
            <summary>
            Creates a 1D FFT plan configuration for a specified signal size and data
            type. The <c>batch</c> input parameter tells CUFFT how many 1D
            transforms to configure.
            </summary>
            <param name="plan">Pointer to a <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object</param>
            <param name="nx">The transform size (e.g., 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., C2C for complex to complex)</param>
            <param name="batch">Number of transforms of size nx</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.AllocFailed"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidType"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InternalError"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidSize"/>, 
            </returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftPlan2d(ManagedCuda.CudaFFT.cufftHandle@,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType)">
            <summary>
            Creates a 2D FFT plan configuration according to specified signal sizes
            and data type. This function is the same as <see cref="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftPlan1d(ManagedCuda.CudaFFT.cufftHandle@,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32)"/> except that
            it takes a second size parameter, <c>ny</c>, and does not support batching.
            </summary>
            <param name="plan">Pointer to a <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object</param>
            <param name="nx">The transform size in the X dimension (number of rows)</param>
            <param name="ny">The transform size in the Y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.AllocFailed"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidType"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InternalError"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidSize"/>, 
            </returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftPlan3d(ManagedCuda.CudaFFT.cufftHandle@,System.Int32,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType)">
            <summary>
            Creates a 3D FFT plan configuration according to specified signal sizes
            and data type. This function is the same as <see cref="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftPlan2d(ManagedCuda.CudaFFT.cufftHandle@,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType)"/> except that
            it takes a third size parameter <c>nz</c>.
            </summary>
            <param name="plan">Pointer to a <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object</param>
            <param name="nx">The transform size in the X dimension</param>
            <param name="ny">The transform size in the Y dimension</param>
            <param name="nz">The transform size in the Z dimension</param>
            <param name="type">The transform data type (e.g., R2C for real to complex)</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.AllocFailed"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidType"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InternalError"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidSize"/>, 
            </returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftPlanMany(ManagedCuda.CudaFFT.cufftHandle@,System.Int32,System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created.<para/>
            Input parameters <c>inembed</c>, <c>istride</c>, and <c>idist</c> and output
            parameters <c>onembed</c>, <c>ostride</c>, and <c>odist</c> will allow setup of noncontiguous
            input data in a future version (Beta status in version 4.0). Note that for CUFFT 3.0,
            these parameters are ignored and the layout of batched data must be
            side‐by‐side and not interleaved.
            </summary>
            <param name="plan">Pointer to a <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="inembed">Pointer of size rank that indicates the storage dimensions of the input data in memory</param>
            <param name="istride">Defines the distance between two successive input elements in the least significant (i.e., innermost) dimension</param>
            <param name="idist">Indicates the distance between the first element of two consecutive batches in the input data</param>
            <param name="onembed">Pointer of size rank that indicates the storage dimensions of the output data in memory</param>
            <param name="ostride">Defines the distance between two successive output elements in the output array in the least significant (i.e., innermost) dimension</param>
            <param name="odist">Indicates the distance between the first element of two consecutive batches in the output data</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="batch">Batch size for this transform</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.AllocFailed"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidType"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InternalError"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidSize"/>, 
            </returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftDestroy(ManagedCuda.CudaFFT.cufftHandle)">
            <summary>
            Frees all GPU resources associated with a CUFFT plan and destroys the
            internal plan data structure. This function should be called once a plan
            is no longer needed to avoid wasting GPU memory.
            </summary>
            <param name="plan">The <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object of the plan to be destroyed.</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftExecC2C(ManagedCuda.CudaFFT.cufftHandle,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFFT single‐precision complex‐to‐complex transform
            plan as specified by direction. CUFFT uses as input data the GPU
            memory pointed to by the idata parameter. This function stores the
            Fourier coefficients in the odata array. If idata and odata are the
            same, this method does an in‐place transform.
            </summary>
            <param name="plan">The <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object of the plan to be destroyed.</param>
            <param name="idata">cuFloatComplex: Pointer to the single-precision complex input data (in GPU memory) to transform</param>
            <param name="odata">cuFloatComplex: Pointer to the single-precision complex output data (in GPU memory)</param>
            <param name="direction">The transform direction: Forward or Inverse</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InternalError"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidPlan"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftExecR2C(ManagedCuda.CudaFFT.cufftHandle,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            executes a CUFFT single‐precision real‐to‐complex (implicitly
            forward) transform plan. CUFFT uses as input data the GPU memory
            pointed to by the <c>idata</c> parameter. This function stores the nonredundant
            Fourier coefficients in the <c>odata</c> array. If <c>idata</c> and <c>odata</c>
            are the same, this method does an in‐place transform (See “CUFFT
            Transform Types” on page 4 for details on real data FFTs.)
            </summary>
            <param name="plan">The <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object of the plan to be destroyed.</param>
            <param name="idata">cuFloatReal: Pointer to the single-precision real input data (in GPU memory) to transform</param>
            <param name="odata">cuFloatComplex: Pointer to the single-precision complex output data (in GPU memory)</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidPlan"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.ExecFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftExecC2R(ManagedCuda.CudaFFT.cufftHandle,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFFT single‐precision complex‐to‐real (implicitly inverse)
            transform plan. CUFFT uses as input data the GPU memory pointed to
            by the idata parameter. The input array holds only the nonredundant
            complex Fourier coefficients. This function stores the real
            output values in the odata array. If idata and odata are the same, this
            method does an in‐place transform. (See “CUFFT Transform Types”
            on page 4 for details on real data FFTs.)
            </summary>
            <param name="plan">The <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object of the plan to be destroyed.</param>
            <param name="idata">cuFloatComplex: Pointer to the single-precision complex input data (in GPU memory) to transform</param>
            <param name="odata">cuFloatReal: Pointer to the single-precision real output data (in GPU memory)</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidPlan"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.ExecFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftExecZ2Z(ManagedCuda.CudaFFT.cufftHandle,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFFT double‐precision complex‐to‐complex transform
            plan as specified by direction. CUFFT uses as input data the GPU
            memory pointed to by the <c>idata</c> parameter. This function stores the
            Fourier coefficients in the <c>odata</c> array. If <c>idata</c> and <c>odata</c> are the
            same, this method does an in‐place transform.
            </summary>
            <param name="plan">The <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object of the plan to be destroyed.</param>
            <param name="idata">cuDoubleComplex: Pointer to the double-precision complex input data (in GPU memory) to transform</param>
            <param name="odata">cuDoubleComplex: Pointer to the double-precision complex output data (in GPU memory)</param>
            <param name="direction">The transform direction: Forward or Inverse</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidPlan"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.ExecFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftExecD2Z(ManagedCuda.CudaFFT.cufftHandle,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFFT double‐precision real‐to‐complex (implicitly
            forward) transform plan. CUFFT uses as input data the GPU memory
            pointed to by the <c>idata</c> parameter. This function stores the nonredundant
            Fourier coefficients in the <c>odata</c> array. If <c>idata</c> and <c>odata</c>
            are the same, this method does an in‐place transform (See “CUFFT
            Transform Types” on page 4 for details on real data FFTs.)
            </summary>
            <param name="plan">The <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object of the plan to be destroyed.</param>
            <param name="idata">cuDoubleReal: Pointer to the double-precision real input data (in GPU memory) to transform</param>
            <param name="odata">cuDoubleComplex: Pointer to the double-precision complex output data (in GPU memory)</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidPlan"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.ExecFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftExecZ2D(ManagedCuda.CudaFFT.cufftHandle,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFFT double‐precision complex‐to‐real (implicitly
            inverse) transform plan. CUFFT uses as input data the GPU memory
            pointed to by the <c>idata</c> parameter. The input array holds only the
            non‐redundant complex Fourier coefficients. This function stores the
            real output values in the <c>odata</c> array. If <c>idata</c> and <c>odata</c> are the same,
            this method does an in‐place transform. (See “CUFFT Transform
            Types” on page 4 for details on real data FFTs.)
            </summary>
            <param name="plan">The <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object of the plan to be destroyed.</param>
            <param name="idata">cuDoubleComplex: Pointer to the double-precision complex input data (in GPU memory) to transform</param>
            <param name="odata">cuDoubleReal: Pointer to the double-precision real output data (in GPU memory)</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidPlan"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.ExecFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftSetStream(ManagedCuda.CudaFFT.cufftHandle,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Associates a CUDA stream with a CUFFT plan. All kernel launches
            made during plan execution are now done through the associated
            stream, enabling overlap with activity in other streams (for example,
            data copying). The association remains until the plan is destroyed or
            the stream is changed with another call to cufftSetStream().
            </summary>
            <param name="plan">The <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object of the plan to be destroyed.</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidPlan"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftSetCompatibilityMode(ManagedCuda.CudaFFT.cufftHandle,ManagedCuda.CudaFFT.Compatibility)">
            <summary>
            configures the layout of CUFFT output in FFTW‐compatible modes.
            When FFTW compatibility is desired, it can be configured for padding
            only, for asymmetric complex inputs only, or to be fully compatible.
            </summary>
            <param name="plan">The <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object of the plan to be destroyed.</param>
            <param name="mode">The <see cref="T:ManagedCuda.CudaFFT.Compatibility"/> option to be used</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidPlan"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/></returns>
        </member>
        <member name="T:ManagedCuda.CudaFFT.CudaFFTPlan3D">
            <summary>
            Creates a 3D FFT plan configuration according to specified signal sizes
            and data type. This class is the same as <see cref="T:ManagedCuda.CudaFFT.CudaFFTPlan2D"/> except that
            it takes a third size parameter <c>nz</c>.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.#ctor(System.Int32,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType)">
            <summary>
            Creates a new 3D FFT plan
            </summary>
            <param name="nx">The transform size in the X dimension</param>
            <param name="ny">The transform size in the Y dimension</param>
            <param name="nz">The transform size in the Z dimension</param>
            <param name="type">The transform data type (e.g., R2C for real to complex)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.#ctor(System.Int32,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Creates a new 3D FFT plan
            </summary>
            <param name="nx">The transform size in the X dimension</param>
            <param name="ny">The transform size in the Y dimension</param>
            <param name="nz">The transform size in the Z dimension</param>
            <param name="type">The transform data type (e.g., R2C for real to complex)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.#ctor(System.Int32,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.CudaFFT.Compatibility)">
            <summary>
            Creates a new 3D FFT plan
            </summary>
            <param name="nx">The transform size in the X dimension</param>
            <param name="ny">The transform size in the Y dimension</param>
            <param name="nz">The transform size in the Z dimension</param>
            <param name="type">The transform data type (e.g., R2C for real to complex)</param>
            <param name="mode">The <see cref="T:ManagedCuda.CudaFFT.Compatibility"/> option to be used</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.#ctor(System.Int32,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream,ManagedCuda.CudaFFT.Compatibility)">
            <summary>
            Creates a new 3D FFT plan
            </summary>
            <param name="nx">The transform size in the X dimension</param>
            <param name="ny">The transform size in the Y dimension</param>
            <param name="nz">The transform size in the Z dimension</param>
            <param name="type">The transform data type (e.g., R2C for real to complex)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="mode">The <see cref="T:ManagedCuda.CudaFFT.Compatibility"/> option to be used</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            If idata and odata are the
            same, this method does an in‐place transform.
            </summary>
            <param name="idata"></param>
            <param name="odata"></param>
            <param name="direction">Only unsed for transformations where direction is not implicitly given by type</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            This method does an in‐place transform.
            </summary>
            <param name="iodata"></param>
            <param name="direction">Only unsed for transformations where direction is not implicitly given by type</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            If idata and odata are the
            same, this method does an in‐place transform.<para/>
            This method is only valid for transform types where transorm direction is implicitly 
            given by the type (i.e. not C2C and not Z2Z)
            </summary>
            <param name="idata"></param>
            <param name="odata"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.Exec(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            This method does an in‐place transform.<para/>
            This method is only valid for transform types where transorm direction is implicitly 
            given by the type (i.e. not C2C and not Z2Z)
            </summary>
            <param name="iodata"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.SetStream(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Associates a CUDA stream with a CUFFT plan. All kernel launches
            made during plan execution are now done through the associated
            stream, enabling overlap with activity in other streams (for example,
            data copying). The association remains until the plan is destroyed or
            the stream is changed with another call to SetStream().
            </summary>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.SetCompatibilityMode(ManagedCuda.CudaFFT.Compatibility)">
            <summary>
            configures the layout of CUFFT output in FFTW‐compatible modes.
            When FFTW compatibility is desired, it can be configured for padding
            only, for asymmetric complex inputs only, or to be fully compatible.
            </summary>
            <param name="mode">The <see cref="T:ManagedCuda.CudaFFT.Compatibility"/> option to be used</param>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan3D.NX">
            <summary>
            The transform size in the X dimension
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan3D.NY">
            <summary>
            The transform size in the Y dimension
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan3D.NZ">
            <summary>
            The transform size in the Z dimension
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan3D.Type">
            <summary>
            The transform data type (e.g., R2C for real to complex)
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaFFT.cufftResult">
            <summary>
            CUFFT API function return values 
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.Success">
            <summary>
            Any CUFFT operation is successful.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.InvalidPlan">
            <summary>
            CUFFT is passed an invalid plan handle.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.AllocFailed">
            <summary>
            CUFFT failed to allocate GPU memory.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.InvalidType">
            <summary>
            The user requests an unsupported type.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue">
            <summary>
            The user specifies a bad memory pointer.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.InternalError">
            <summary>
            Used for all internal driver errors.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.ExecFailed">
            <summary>
            CUFFT failed to execute an FFT on the GPU.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed">
            <summary>
            The CUFFT library failed to initialize.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.InvalidSize">
            <summary>
            The user specifies an unsupported FFT size.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.UnalignedData">
            <summary>
            Input or output does not satisfy texture alignment requirements.
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaFFT.cufftHandle">
            <summary>
            cufftHandle is a handle type used to store and access CUFFT plans.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftHandle.Handle">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaFFT.TransformDirection">
            <summary>
            CUFFT transform directions 
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.TransformDirection.Forward">
            <summary>
            
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.TransformDirection.Inverse">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaFFT.cufftType">
            <summary>
            CUFFT supports the following transform types 
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftType.R2C">
            <summary>
            Real to Complex (interleaved)
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftType.C2R">
            <summary>
            Complex (interleaved) to Real
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftType.C2C">
            <summary>
            Complex to Complex, interleaved
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftType.D2Z">
            <summary>
            Double to Double-Complex
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftType.Z2D">
            <summary>
            Double-Complex to Double
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftType.Z2Z">
            <summary>
            Double-Complex to Double-Complex
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaFFT.Compatibility">
            <summary>
            Certain R2C and C2R transforms go much more slowly when FFTW memory
            layout and behaviour is required. The default is "best performance",
            which means not-compatible-with-fftw. Use the <see cref="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftSetCompatibilityMode(ManagedCuda.CudaFFT.cufftHandle,ManagedCuda.CudaFFT.Compatibility)"/>
            API to enable exact FFTW-like behaviour.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.Compatibility.NATIVE">
            <summary>
            Disable any FFTW compatibility mode
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.Compatibility.PADDING">
            <summary>
            Inserts extra padding between packed in-place transforms for batched transforms with power-of-2 size.<para/>
            Default value
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.Compatibility.ASYMMETRIC">
            <summary>
            Guarantees FFTW-compatible output for non-symmetric complex inputs
            for transforms with power-of-2 size. This is only useful for
            artificial (i.e. random) datasets as actual data will always be
            symmetric if it has come from the real plane. If you don't
            understand what this means, you probably don't have to use it.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.Compatibility.ALL">
            <summary>
            Enable full FFTW compatibility.
            </summary>
        </member>
    </members>
</doc>
